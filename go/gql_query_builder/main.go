package main

import (
	"context"
	"fmt"
	"log"

	"github.com/tooilxui/playground/gql"

	"github.com/machinebox/graphql"
)

func main() {

	f := gql.Query(
		gql.Field("erp_author", "id", "name").Where(gql.GT("id", "$id")).And(gql.EQ("name", "$name")).Asc("id").Desc("name").
			WithSubField(gql.Field("articles", "id", "title", "rating").Where(gql.GT("rating", "$rating")).Or(gql.LT("rating", "$rating2"))),
	)

	fmt.Println(f.String())

	client := graphql.NewClient("http://localhost:8080/v1/graphql")

	client.Log = func(s string) {
		log.Print(s)
	}
	req := graphql.NewRequest(f.String())

	req.Var("id", "")
	req.Var("name", "")
	req.Var("rating", "")
	req.Var("rating2", "")

	ctx := context.Background()
	var res Data
	if err := client.Run(ctx, req, &res); err != nil {
		log.Fatal(err)
	}

	fmt.Print(res)

}

//type AutoGenerated struct {
type Data struct {
	MesTest []struct {
		Material struct {
			Store struct {
				Book []struct {
					Price    float64 `json:"price,omitempty"`
					Title    string  `json:"title,omitempty"`
					Author   string  `json:"author,omitempty"`
					Category string  `json:"category,omitempty"`
					Isbn     string  `json:"isbn,omitempty"`
				} `json:"book,omitempty"`
				Bicycle struct {
					Color string  `json:"color,omitempty"`
					Price float64 `json:"price,omitempty"`
				} `json:"bicycle,omitempty"`
			} `json:"store,omitempty"`
			Expensive int `json:"expensive,omitempty"`
		} `json:"material,omitempty"`
	} `json:"mes_test,omitempty"`
	//} `json:"data"`
}
